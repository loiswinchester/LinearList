#include<stdio.h>
#include<stdbool.h>
#include <malloc.h>
//不带头节点的单链表
typedef struct LNode {//typedef：数据类型重命名；typedef<数据类型><别名>
	int data;
	struct LNode *next;//指针指向下一个节点
} LNode, * LinkList;

//初始化一个空的单链表（不带头节点）
//bool InitList(LinkList L) {//&L
//	L = NULL;//空表，此表中还没有任何节点
//	return true;
//}
bool InitList(LinkList L) {
	L = (LNode*)malloc(sizeof(LNode));//分配一个头节点
	if (L == NULL)//内存不足，分配失败
		return false;
	L->data = NULL;//头节点之后暂时还没有节点
	return true;
//按位序删除（带头节点）
bool ListDelete(LinkList& L, int i, int& e) {
	if (i < 1)
		return false;
	LNode* p;//指针p指向当前扫描到的节点
	int j = 0;//p指向的是第几个节点
	p = L;
	while (p != NULL && j < i - 1) {
		p = p->next;
		j++;
	}
	if (p == NULL)
		return false;
	if (p->next == NULL)
		return false;
	LNode *q = p->next;//令q指向被删除节点
	e = q->data;//用e返回元素值
	p->next = q->next;//将*q节点从链中断开
	free(q);
	return false;
}
//指定节点的删除
bool DeleteNode(LNode* p) {
	if (p == NULL)
		return false;
	LNode *q = p->next;//令q指向*p的后继节点
	p->data = p->next->data;//和后继节点交换数据域
	p->next = q->next;
	free(q);
	return false;
}
