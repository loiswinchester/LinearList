#include<stdio.h>
#include<stdbool.h>
#include <malloc.h>
//不带头节点的单链表
typedef struct LNode {//typedef：数据类型重命名；typedef<数据类型><别名>
	int data;
	struct LNode *next;//指针指向下一个节点
} LNode, * LinkList;

//初始化一个空的单链表（不带头节点）
//bool InitList(LinkList L) {//&L
//	L = NULL;//空表，此表中还没有任何节点
//	return true;
//}
bool InitList(LinkList L) {
	L = (LNode*)malloc(sizeof(LNode));//分配一个头节点
	if (L == NULL)//内存不足，分配失败
		return false;
	L->data = NULL;//头节点之后暂时还没有节点
	return true;
}
//后插操作；在p节点之后插入元素e
bool InsertNextNode(LNode* p, int e) {
	if (p == NULL)
		return false;
	LNode* s = (LNode*)malloc(sizeof(LNode));
	if (s==NULL)//内存分配失败
		return false;
	s->data = e;
	s->next = p->next;
	p->next = s;//将节点s连接到p之后
	return true;
	
}
//前插操作：在p节点之前插入元素e；时间复杂度=O（1）
bool InsertPriorNode(LNode* p, int e) {
	if (p == NULL)
		return false;
	LNode* s = (LNode*)malloc(sizeof(LNode));
	if (s == NULL)//内存分配失败
		return false;
	s->next = p->next;
	p->next = s;//将节点s连接到p之后
	s->data = p->data;//交换s与p
	p->data = e;
	return true;

}
