//尾插法建立单链表
LinkList List_TailInsert(LinkList& L) {
	int x;//要插入元素
	L = (LinkList)malloc(sizeof(LNode));//初始化空表？
	LNode* s, * r = L;//r为表尾指针？
	scanf("%d",&x);//输入要插入值
	while (x!=9999)
	{
		s = (LNode*)malloc(sizeof(LNode));
		s->data = x;
		r->next = s;//在r节点之后插入元素x
		r = s;//永远保持r指向最后一个节点
		scanf("%d", &x);
	}
	r->next = NULL;
	return L;
}
//头插法建立单链表
LinkList List_HeadInsert(LinkList& L) {
	LNode* s;
	int x;
	L = (LinkList)malloc(sizeof(LNode));
	L->next = NULL;//防止动态申请的内存空间存在脏数据
	scanf("%d", &x);//输入节点值
	while (x!=9999)
	{
		s = (LNode*)malloc(sizeof(LNode));
		s->data = x;
		s->next = L->next;
		L->next = s;//将新节点插入表中，L为头指针
		scanf("%d", &x);//继续输入
	}
	return L;
}
